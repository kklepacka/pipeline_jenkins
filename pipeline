pipeline {
    agent any
    environment {
        WORKFLOW_ID = ''
    }
    stages {
        stage('Run Workflow') {
            steps {
                script {
                    // Run the workflow and capture the result
                    def workflow_command = 'opentf-ctl run workflow .opentf/suite_Admin_ref_unca_Carpa.json'
                    def workflow_result = bat(returnStdout: true, script: workflow_command).trim()
                    echo "Workflow result: ${workflow_result}"

                    // Extract the WORKFLOW_ID from the result
                    def workflow_id_match = (workflow_result =~ /Workflow ([\w-]+)/)
                    if (workflow_id_match) {
                        WORKFLOW_ID = workflow_id_match[0][1].toString()
                        echo "Extracted WORKFLOW_ID: ${WORKFLOW_ID}"
                    } else {
                        error("Failed to extract WORKFLOW_ID from workflow result: ${workflow_result}")
                    }
                }
            }
        }
        stage('Wait for workflow to finish') {
            steps {
                script {
                    // Define the watch command
                    def watch_command = "opentf-ctl get workflow ${WORKFLOW_ID} --watch"
                    
                    // Set up retry mechanism with timeout
                    timeout(time: 60, unit: 'MINUTES') {  // Adjust timeout as needed
                        retry(3) {  // Will retry up to 3 times
                            try {
                                // Execute with specific encoding to handle Unicode characters
                                withEnv(['PYTHONIOENCODING=utf8']) {
                                    bat script: """
                                        @echo off
                                        chcp 65001 > nul
                                        ${watch_command}
                                    """
                                }
                            } catch (Exception e) {
                                // Check if workflow is actually complete despite the error
                                def status_command = "opentf-ctl get workflow ${WORKFLOW_ID} --output json"
                                def status = bat(script: status_command, returnStdout: true).trim()
                                
                                // If workflow is complete (status is success/failed/terminated), continue
                                if (status.contains('"status": "completed"') || 
                                    status.contains('"status": "failed"') || 
                                    status.contains('"status": "terminated"')) {
                                    echo "Workflow completed with status: ${status}"
                                    return
                                }
                                
                                // If workflow is still running, throw the error to trigger retry
                                throw e
                            }
                        }
                    }
                }
            }
        }
        stage('Prepare Workspace') {
            steps {
                script {
                    // Ensure the workspace is clean
                    bat 'if exist executionreport.html del executionreport.html'
                }
            }
        }

        stage('Get Attachments') {
            steps {
                script {
                    def maxRetries = 5
                    def retryDelay = 5 // seconds
                    def success = false
                    def attach_html = "opentf-ctl cp ${WORKFLOW_ID}:*.html ."
        
                    for (int i = 1; i <= maxRetries; i++) {
                        try {
                            echo "Attempt ${i} of ${maxRetries}..."
                            sleep(time: retryDelay, unit: 'SECONDS') // Ensure files are available
        
                            def attach_html_result = bat(returnStdout: true, script: attach_html).trim()
                            echo "Attachments copy result: ${attach_html_result}"
                            
                            success = true
                            break // Exit loop on success
                        } catch (Exception e) {
                            echo "Attempt ${i} failed: ${e.getMessage()}"
                            if (i < maxRetries) {
                                echo "Retrying in ${retryDelay} seconds..."
                                sleep(time: retryDelay, unit: 'SECONDS')
                            }
                        }
                    }
        
                    if (!success) {
                        error("Failed to copy attachments after ${maxRetries} attempts.")
                    }
                }
            }
        }


        stage('Publish HTML Report') {
            steps {
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'executionreport.html',
                    reportName: 'Test Report',
                    reportTitles: 'Execution Report'
                ])
            }
        }

        stage('Apply Quality Gate') {
            steps {
                script {
                    def qg_command = "opentf-ctl get qualitygate ${WORKFLOW_ID} --mode strict"
                    def qg_result = bat(returnStdout: true, script: qg_command).trim()
                    echo "Quality Gate result: ${qg_result}"
                }
            }
        }
    }
}
